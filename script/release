#!/bin/sh

set -e

CDPATH="" cd -- "$(dirname -- "$0")/.."

[ -n "$GITHUB_TOKEN" ] || {
  echo GITHUB_TOKEN must be set
  exit 1
}

script/bindown -q install semver-next
script/bindown -q install gh
script/bindown -q install jq

GITHUB_SHA="${GITHUB_SHA:-"$(git rev-parse HEAD)"}"
GITHUB_REPOSITORY="${GITHUB_REPOSITORY:-"WillAbides/gh-describe"}"

# regex matches non-prerelease tags
PREV_REF="$(script/gh-describe --tags --abbrev=0 --regex-match='v[0-9]+\.[0-9]+\.[0-9]+$' --always "$GITHUB_SHA")"

# On first release PREV_REF will be the same as GITHUB_SHA
if [ "$GITHUB_SHA" = "$PREV_REF" ]; then
  NEXT_VERSION="0.1.0"
else
  RES="$(bin/semver-next "$GITHUB_REPOSITORY" -r "$GITHUB_SHA" -p "$PREV_REF" -v "$PREV_REF" --json)"
  NEXT_VERSION="$(echo "$RES" | bin/jq -r .next_version)"
  CHANGE_LEVEL="$(echo "$RES" | bin/jq -r .change_level)"
  if [ "$CHANGE_LEVEL" = "no change" ]; then
    echo "No changes since last release"
    exit 0
  fi
fi

MODULE_NAME="$(go list -m)"
MAJOR_VERSION="$(echo "$NEXT_VERSION" | cut -d. -f1)"
MODULE_VERSION_SUFFIX="$(echo "$MODULE_NAME" | grep -o '/v[0-9][0-9]*$' || true)"

# If MAJOR_VERSION >= 2, make sure the module name ends with `/v$MAJOR_VERSION`
if [ "$MAJOR_VERSION" -ge 2 ]; then
  if [ "$MODULE_VERSION_SUFFIX" != "/v$MAJOR_VERSION" ]; then
    echo "Module name must end with /v$MAJOR_VERSION"
    exit 1
  fi
else
  if [ -n "$MODULE_VERSION_SUFFIX" ]; then
    echo "Module name must not end with /v[0-9][0-9]*"
    exit 1
  fi
fi

bin/gh release create "v$NEXT_VERSION" -t "v$NEXT_VERSION" --generate-notes

# If there's no .goreleaser.yaml, there's nothing left to do.
[ -f ".goreleaser.yaml" ] || exit 0

git fetch --tags

script/bindown -q install goreleaser

bin/goreleaser release
